{"version":3,"sources":["components/Navbar.js","components/Header.js","components/Card/CharacterCard.js","components/Wrapper/Wrapper.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","score","topScore","Header","Component","Toon","onClick","clickedToon","alt","name","src","image","Wrapper","children","shuffle","arr","i","length","j","Math","floor","random","_ref","App","state","character","_this","indexOf","push","console","log","handleIncrement","makeShuffle","alert","setState","_this2","this","components_Navbar","components_Header","components_Wrapper_Wrapper","map","Card_CharacterCard","key","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bd2035e5.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../styles/Navbar.css\";\n\nconst Navbar = props => (\n    \n    <nav className=\"navbar sticky-top navbar-expand-lg navbar-light bg-light \">\n        <a className=\"navbar brand\" href=\"/Clicky-Game/\"> Clicky Game - Nostalgic Looney Toons</a>\n    <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n      <span className=\"navbar-toggler-icon\"></span>\n    </button>\n    <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\n      <ul className=\"navbar-nav\">\n        <li className=\"score\">Score: {props.score} | Top score: {props.topScore}</li>\n       \n      </ul>\n    </div>\n  </nav>\n  \n)\n\nexport default Navbar;","import React, { Component } from \"react\";\nimport \"../styles/Header.css\";\n\nclass Header extends Component {\n    render() {\n        return (\n            <div className=\"jumbotron jumbotron-fluid header\">\n                <div className=\"container text-center \">\n                    <h1 className=\"display-4\">Start clicking to play!</h1>\n                    <p className=\"h3\">Instructions: </p>\n                <p className=\"lead\"> Earning points is easy, just click on any image. Once one image is clicked\n                the board will shuffle! If you click on the same image twice, you lose! Try to last a round without\n                clicking any doubles to hit the top score and <strong>WIN!</strong></p>                </div>\n            </div>\n\n            \n        )\n    }\n}\nexport default Header;","import React from 'react';\nimport \"./CharacterCard.css\";\n\nconst Toon = props => (\n    <div className=\"card\" onClick={() => props.clickedToon(props.id)}>\n        <div className=\"img-container\">\n            <img alt={props.name} src={props.image} />\n        </div>\n    </div>\n)\nexport default Toon;","import React from \"react\";\nimport \"./Wrapper.css\";\n\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\nexport default Wrapper;","import React, { Component } from 'react';\nimport Navbar from \"./components/Navbar\";\nimport Header from \"./components/Header\";\nimport Toon from \"./components/Card\";\nimport Wrapper from \"./components/Wrapper\";\nimport character from \"./character.json\"\n\n// first i want to shuffle the cards\n\nfunction shuffle(arr) {\n  for (let i = arr.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [arr[i], arr[j]] = [arr[j], arr[i]];\n  }\n  return arr;\n}\n\nclass App extends Component {\n  state = {\n    character,\n    score: 0,\n    topScore: 0,\n    clickedToon: []\n  };\n\n  clickedToon = id => {\n    let clickedToon = this.state.clickedToon;\n    let score = this.state.score;\n    let topScore = this.state.topScore;\n\n\n    if (clickedToon.indexOf(id) === -1) {\n      clickedToon.push(id);\n      console.log(clickedToon);\n\n      this.handleIncrement();\n\n      this.makeShuffle();\n\n    } else if (this.state.score === 13) {\n      alert(\"Winner Winner chicken Dinner, you clicked and hit the top score! Now leave...\");\n      this.setState({\n        clickedToon: [],\n        score: 0\n      });\n    } else {\n      this.setState({\n        score: 0,\n        clickedToon: []\n      });\n      console.log(\"Doubled down\");\n      alert(\"You lose! Try clicked different images to hit the top score!\");\n    }\n\n    if (score > topScore) {\n      this.setState({\n        topScore: score\n      })\n    }\n  }\n\n\n  // f(x) for auto incrememnt onClick\n\n  handleIncrement = () => {\n    this.setState({ score: this.state.score + 1 });\n  }\n\n  makeShuffle = () => {\n    this.setState({ character: shuffle(character) })\n  }\n\n  render() {\n    return (\n      <div>\n        <Navbar\n          score={this.state.score}\n          topScore={this.state.topScore}\n        />\n        <Header />\n        <Wrapper>\n          {this.state.character.map(character => (\n            <Toon\n              key={character.id}\n              id={character.id}\n              name={character.name}\n              image={character.image}\n              clickedToon={this.clickedToon}\n            />\n          ))}\n        </Wrapper>\n      </div>\n    )\n  }\n}\n\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}